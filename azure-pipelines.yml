resources:
 repositories:
   - repository: Mock_code_repo
     type: github
     endpoint: GitHubConn
     name: vinitamishra15/Mock_code_repo
   - repository: Demo_test
     type: github
     endpoint: GitHubConn
     name: vinitamishra15/Demo_test
     ref: refs/heads/master

#trigger:
#- main

#Currently using self hosted agent
#pool: Default
pool: WindowsPool

variables:
  serviceNowUrl: https://dev215992.service-now.com/
  serviceNowUsername: 'admin'
  serviceNowPassword: 'BR*qPn3oA5o='
  IMPORT_URL: 'https://dev291092.service-now.com/api/sn_cicd/import'
  IMPORT_USER: 'admin'
  IMPORT_PWD: 'mJ!*4Yuvp2JJ'  # Consider using a secure variable for this
  GITHUB_REPO_URL: 'https://github.com/vinitamishra15/Mock_code_repo.git'
  APP_NAME: 'YourAppName'

stages:
- stage: build
  jobs:
  - job: Build
    steps:

    # Step 1: Checkout the code from GitHub
    - checkout: self
    - checkout: Mock_code_repo
    - checkout: Demo_test

    # Step 2: Prepare SonarQube for scan
#    - task: SonarQubePrepare@6
#      inputs:
#         SonarQube: 'Sonar_conn'
#         scannerMode: CLI
#         configMode: file
##         configFile: 'sonar-project.properties'
#         cliProjectKey: DemoScan
#         cliProjectName: DemoScan

#    # Step 3: Run SonarQube scan
#    - script: |
#        sonar-scanner -Dsonar.projectKey=DemoScan -Dsonar.sources=. -Dsonar.host.url=http://localhost:9000/ -Dsonar.login=sqa_308859b46080fb65c3121ee7b6db0b465a4ea3ad
##      workingDirectory: dummy_repo
#      displayName: 'Run SonarQube Analysis'

#    # Step 3: Prepare to run test cases
#    - script: |
#        python -m pip install --upgrade pip
#        pip install selenium
#        pip install webdriver-manager
#        pip install pytest
#        pip install pytest-html
#      displayName: 'Install dependencies for selenium'

#    # Step 4: Run Selenium test cases
#    - script: |
#        pytest Demo_test/Testcase/test_E2EDemoApp.py --maxfail=1 --disable-warnings -q --html=testReport.html
#      displayName: 'Run selenium test cases and generate test reports'
      
#    - task: PublishBuildArtifacts@1
#      inputs:
#        PathtoPublish: testReport.html
#        ArtifactName: SeleniumTestResults
#        publishLocation: Container
#      displayName: "Publishing the report"
      
    # Step 5: To import application in non prod environment
    - task: PowerShell@2
      inputs:
        targetType: inline
        script: |
          Write-Host "Starting import to ServiceNow..."

          # Variables
          $serviceNowUrl ='https://dev291092.service-now.com/api/sn_cicd/sc/apply_changes'
          $repoUrl ='https://github.com/vinitamishra15/Mock_code_repo.git'
          $branch ='main'
          $credentialSysId ='f49b8065c32b12107860fd1d050131c7'
          $username ='admin'  # Consider using a secure variable
          $password ='mJ!*4Yuvp2JJ'  # Consider using a secure variable
          $appSysID ='97ac9b1047641210acd2a22f316d432f'
          $appScope = 'global'
          
          $base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(("{0}:{1}" -f $username, $password)))
          
          # Set proper headers
          $headers = New-Object "System.Collections.Generic.Dictionary[[String],[String]]"
          $headers.Add('Authorization',('Basic {0}' -f $base64AuthInfo))
          $headers.Add('Accept','application/json')
          
          # Specify endpoint uri
          $uri = "https://dev291092.service-now.com/api/sn_cicd/sc/apply_changes?app_sys_id=97ac9b1047641210acd2a22f316d432f&app_scope=global&branch_name=main"

          # Invoke the ServiceNow API
          $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
          $credential = New-Object System.Management.Automation.PSCredential($username, $securePassword)

          $response = Invoke-RestMethod -Uri $uri -Method POST -Headers @{
            "Accept"       = "application/json"
            "Content-Type" = "application/json"
          } -Credential $credential -Body @{}

          $responseResult = $response.result.status_label
          $resLinks = $response.result.percent_complete
          $resURL = $response.result.links.progress.url
          Write-Host "Response is : $responseResult"
          Write-Host "Response data: $resLinks"
          Write-Host "Response result: $resURL"
          Write-Host "Remote changes applied."

          # Check if the status is 100% by hitting the URL
          $checkStatusResponse = Invoke-RestMethod -Uri $resURL -Method GET -Headers @{
          "Accept"       = "application/json"
          "Content-Type" = "application/json"
          } -Credential $credential
          
          $xmlResponse = $checkStatusResponse | ConvertTo-Xml -Depth 3
          Write-Host "Status Reposne: $xmlResponse"
          $jsonResponse = $checkStatusResponse | ConvertTo-Json -Depth 3
          Write-Host "Status response in JSON: $jsonResponse"
          $status = $checkStatusResponse.result.status
          Write-Host "Current status: $status"

      displayName: "Import application from GitHub to ServiceNow"

#    - task: PowerShell@2
#      inputs:
#        targetType: inline
#        script: |
#          if ($LASTEXITCODE -ne 0) {
#            $url = "https://dev212832.service-now.com/api/now/table/incident"
#            $auth = [Convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes("admin:tt!rSy25Y^SK"))
#            $headers = @{
#                "Authorization" = "Basic " + [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes("admin:tt!rSy25Y^SK"))
#                "Content-Type" = "application/json"
#              }
#            $body = @{
#                "short_description" = "Azure Pipeline Failure: $(Build.DefinitionName)"
#                "description" = "Pipeline failed on $(Build.BuildId)"
#              } | ConvertTo-Json
#                        Write-Host "URI: $url"
#          Write-Host "Auth: $auth"
#          Write-Host "headers: $headers"
#          Write-Host "body: $body"
#              Invoke-RestMethod -Uri $url -Method Post -Headers $headers -Body $body
#          }
#      condition: failed()

#    - task: PowerShell@2
#      inputs:
#        targetType: inline
#        script: |
#          $url = "https://dev212832.service-now.com/api/now/table/change_request"
#          $auth = [Convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes("admin:tt!rSy25Y^SK"))
#          $headers = @{
#                "Authorization" = "Basic " + [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes("admin:tt!rSy25Y^SK"))
#                "Content-Type" = "application/json"
#              }
#          $body = @{
#            "short_description" = "Azure Pipeline Success: $(Build.DefinitionName)"
#            "description" = "Pipeline succeeded for build $(Build.BuildId)"
#            "category" = "Software"
#            "type" = "Normal"
#            "priority" = "4"
#            "assignment_group" = "Change Management"
#          } | ConvertTo-Json
#          Write-Host "URI: $url"
#          Write-Host "Auth: $auth"
#          Write-Host "headers: $headers"
#          Write-Host "body: $body"
#          $response = Invoke-RestMethod -Uri $url -Method Post -Headers $headers -Body $body
#          Write-Host "Change Request created with SysID: $($response.result.sys_id)"
#      condition: succeeded()